import 'dotenv/config'
import { GoogleSpreadsheet, GoogleSpreadsheetWorksheet, WorksheetDimension } from 'google-spreadsheet'

import { ExportSettings } from './types'

export default async function generateGoogleSheets(data: object[], settings?: ExportSettings): Promise<void> {
	// authenticating
	if (!process.env.GOOGLE_SPREADSHEET_ID ||
		!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL ||
		!process.env.GOOGLE_PRIVATE_KEY) {
			throw new Error('google credentials data missing; check .env')
	}
	const doc = new GoogleSpreadsheet(process.env.GOOGLE_SPREADSHEET_ID)
	await doc.useServiceAccountAuth({
		// env var values are copied from service account credentials generated by google
		// see "Authentication" section in docs for more info:
		// https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
		// write rights should also be granted to the service account email in the google sheets ui
		client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
		private_key: process.env.GOOGLE_PRIVATE_KEY,
	})

	// setting up spreadsheet
	await doc.loadInfo()
	const sheet = doc.sheetsByIndex[0]
	await sheet.clear()
	if (settings?.sheetName) { 
		await sheet.updateProperties({ title: settings?.sheetName }) 
	}

	// setting headers
	// TODO: make settings.setHeaders actually work
	const keys: string[] = Object.keys(data[0] as any)
	// await sheet.resize({ rowCount: data.length + 1, columnCount: keys.length })
	await sheet.setHeaderRow(keys)
	if (settings?.setHeaders) {
		
		// setting headers styles
		if (settings?.columnWidth) {
			for (let column of settings?.columnWidth) {
				await updateSize(sheet, 'COLUMNS', column.index, column.width * 7.5 )
			}
		}
		await updateSize(sheet, 'ROWS', 0, 25 )
		const endColumn = String.fromCharCode('A'.charCodeAt(0) + --keys.length)
		await sheet.loadCells(`A1:${endColumn}1`)
		for (let x = 0; x < keys.length; x++) {
			const cell = sheet.getCell(0, x)
			cell.backgroundColor = { red: 0.96, green: 0.66, blue: 0.55, alpha: 0.65 }
			cell.textFormat = { bold: true }
			cell.horizontalAlignment = 'CENTER'
			cell.verticalAlignment = 'MIDDLE'
		}
		await sheet.saveUpdatedCells()
	}

	// writing data
	await sheet.addRows(data as any)
}


async function updateSize(sheet: GoogleSpreadsheetWorksheet, dimension: WorksheetDimension,
					      index: number, size: number): Promise<void> {
	await sheet.updateDimensionProperties(dimension, {
		pixelSize: size,
		hiddenByFilter: false,
		hiddenByUser: false,
		developerMetadata: []
	}, { startIndex: index, endIndex: index + 1 })
}

